import groovy.json.JsonSlurper

buildscript {
  {%- if cookiecutter.jvm_language == "kotlin" %}
  ext.kotlinVersion = '1.0.4'
  {% endif -%}
  ext.shadowPluginVersion = '1.2.3'
  
  repositories {
    jcenter()
  }

  dependencies {
    classpath "com.github.jengelman.gradle.plugins:shadow:${shadowPluginVersion}"
    {%- if cookiecutter.jvm_language == "kotlin" %}
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    {%- endif %}
  }
}

apply plugin: 'com.github.johnrengelman.shadow'

if (!JavaVersion.current().java8Compatible) {
  throw new IllegalArgumentException('''A Haiku:
                                      |  This needs Java 8,
                                      |  You are using something else,
                                      |  Upgrade. Try again.'''.stripMargin())
}

group   = '{{ cookiecutter.project_package }}'
version = '{{ cookiecutter.project_version }}'

ext {
  junitVersion       = '4.12'
  logbackVersion     = '1.1.7'
  vertxVersion       = '3.3.3'
}

apply plugin: 'java'
{%- if cookiecutter.jvm_language == "kotlin" %}
apply plugin: 'kotlin'
{%- endif %}

repositories {
  jcenter()
  mavenLocal()
}

dependencies {
  compile group: "ch.qos.logback", name: "logback-classic", version: logbackVersion

  compile group: "io.vertx",       name: "vertx-core",      version: vertxVersion
  compile group: "io.vertx",       name: "vertx-web",       version: vertxVersion
  {% if cookiecutter.jvm_language == "kotlin" %}
  compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: kotlinVersion
  {% endif %}
  testCompile group: "io.vertx",    name: "vertx-unit",   version: vertxVersion
  testCompile group: 'junit',       name: 'junit',        version: junitVersion
}


// Ensures we always produce GZIP compressed tarballs.
tasks.withType(Tar) {
  compression = Compression.GZIP
}

// Make acquiring the Gradle wrapper painless.
task wrapper(type: Wrapper) {
  gradleVersion = '3.1'
}

shadowJar {
  classifier = 'fat'

  manifest {
    attributes 'Main-Class'    : 'io.vertx.core.Launcher'
    attributes 'Main-Verticle' : "${project.group}.ServiceVerticle"
  }

  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}
